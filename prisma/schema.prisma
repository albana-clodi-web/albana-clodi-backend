// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_POOL_URL")
}

enum Roles {
  ADMIN
  SUPERADMIN
}

enum PaymentStatus {
  SETTLEMENT
  PENDING
  CANCEL
  INSTALLMENTS
}

enum ProductTypes {
  BARANG_STOK_SENDIRI
  BARANG_SUPPLIER_LAIN
  BARANG_PRE_ORDER
}

enum CustomerCategories {
  CUSTOMER
  RESELLER
  DROPSHIPPER
  MEMBER
  AGENT
}

enum CustomerStatuses {
  ACTIVE
  NONACTIVE
}

enum ProductDiscountTypes {
  PERCENTAGE
  NOMINAL
}

model User {
  id          String    @id @default(uuid()) @db.Uuid
  fullname    String?
  email       String?   @unique
  password    String?
  phoneNumber String?
  role        Roles?
  createdAt   DateTime? @map("created_at")

  @@index([email])
  @@map("users")
}

model Category {
  id        String    @id @default(uuid()) @db.Uuid
  name      String?   @unique
  products  Product[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@index([name])
  @@map("categories")
}

model Product {
  id          String        @id @default(uuid()) @db.Uuid
  categoryId  String?       @map("category_id") @db.Uuid
  name        String?
  type        ProductTypes?
  description String?       @db.Text
  weight      Float?
  isPublish   Boolean?      @default(true) @map("is_publish")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  category        Category?         @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  productVariants ProductVariant[]
  orderDetails    OrderDetail[]
  ProductDiscount ProductDiscount[]
  OrderProduct    OrderProduct[]

  @@index([categoryId])
  @@index([name])
  @@index([isPublish])
  @@map("products")
}

model ProductDiscount {
  id        String                @id @default(uuid()) @db.Uuid
  productId String?               @map("product_id") @db.Uuid
  type      ProductDiscountTypes?
  value     Decimal?
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime              @default(now()) @map("created_at")
  updatedAt DateTime              @updatedAt @map("updated_at")

  product Product? @relation(fields: [productId], references: [id])

  @@map("product_discounts")
}

model ProductPrice {
  id               String   @id @default(uuid()) @db.Uuid
  productVariantId String?  @map("product_variant_id") @db.Uuid
  normal           Float?
  buy              Float?
  reseller         Float?
  agent            Float?
  member           Float?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@index([productVariantId])
  @@map("product_prices")
}

model ProductVariant {
  id        String   @id @default(uuid()) @db.Uuid
  productId String?  @map("product_id") @db.Uuid
  sku       String?
  stock     Int?
  size      String?
  color     String?
  imageUrl  String?  @map("image_url")
  barcode   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product       Product?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productPrices ProductPrice[]

  @@index([productId])
  @@index([sku])
  @@map("product_variant")
}

model Customer {
  id            String              @id @default(uuid()) @db.Uuid
  name          String?
  category      CustomerCategories?
  address       String?             @db.Text
  province      String?
  city          String?
  district      String?
  village       String?
  addressDetail String?             @map("address_detail")
  postalCode    String?             @map("postal_code")
  phoneNumber   String?             @map("phone_number")
  destinationId Int?                @map("destination_id")
  email         String?
  status        CustomerStatuses?
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")

  ordersAsOrderer        Order[] @relation("OrdererCustomer")
  ordersAsDeliveryTarget Order[] @relation("DeliveryTargetCustomer")

  @@index([email])
  @@index([phoneNumber])
  @@index([category])
  @@index([status])
  @@map("customers")
}

model Order {
  id                       String            @id @default(uuid()) @db.Uuid
  ordererCustomerId        String?           @map("orderer_customer_id") @db.Uuid
  deliveryTargetCustomerId String?           @map("delivery_target_customer_id") @db.Uuid
  deliveryPlaceId          String?           @map("delivery_place_id") @db.Uuid
  salesChannelId           String?           @map("sales_channel_id") @db.Uuid
  orderDate                DateTime?         @map("order_date") @db.Date
  note                     String?           @db.Text
  createdAt                DateTime          @default(now()) @map("created_at")
  updatedAt                DateTime          @updatedAt @map("updated_at")
  SalesChannel             SalesChannel?     @relation(fields: [salesChannelId], references: [id])
  DeliveryPlace            DeliveryPlace?    @relation(fields: [deliveryPlaceId], references: [id])
  OrdererCustomer          Customer?         @relation("OrdererCustomer", fields: [ordererCustomerId], references: [id])
  DeliveryTargetCustomer   Customer?         @relation("DeliveryTargetCustomer", fields: [deliveryTargetCustomerId], references: [id])
  OrderDetail              OrderDetail?
  ShippingServices         ShippingService[]

  @@index([ordererCustomerId])
  @@index([deliveryTargetCustomerId])
  @@index([orderDate])
  @@index([deliveryPlaceId])
  @@index([salesChannelId])
  @@index([createdAt])
  @@map("orders")
}

model OrderDetail {
  id              String         @id @default(uuid()) @db.Uuid
  orderId         String         @unique @map("order_id") @db.Uuid
  paymentMethodId String?        @map("payment_method_id") @db.Uuid
  code            String?
  otherFees       Json?          @map("other_fees")
  finalPrice      Float?         @map("final_price")
  paymentStatus   PaymentStatus?
  paymentDate     DateTime?      @map("payment_date")
  receiptNumber   String?        @map("receipt_number")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  Order         Order          @relation(fields: [orderId], references: [id])
  PaymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  OrderProducts OrderProduct[]
  Product       Product?       @relation(fields: [productId], references: [id])
  productId     String?        @db.Uuid

  @@index([paymentMethodId])
  @@index([paymentStatus])
  @@index([code])
  @@map("order_details")
}

model OrderProduct {
  id            String   @id @default(uuid()) @db.Uuid
  orderId       String   @map("order_id") @db.Uuid
  orderDetailId String?  @map("order_detail_id") @db.Uuid
  productId     String   @map("product_id") @db.Uuid
  productQty    Int      @map("product_qty")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  Product     Product      @relation(fields: [productId], references: [id])
  OrderDetail OrderDetail? @relation(fields: [orderDetailId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([orderDetailId])
  @@map("order_products")
}

model ShippingService {
  id               String   @id @default(uuid()) @db.Uuid
  orderId          String   @map("order_id") @db.Uuid
  shippingName     String?  @map("shipping_name")
  serviceName      String?  @map("service_name")
  weight           Int?
  isCod            Boolean? @default(false) @map("is_cod")
  shippingCost     Float?   @map("shipping_cost")
  shippingCashback Float?   @map("shipping_cashback")
  shippingCostNet  Float?   @map("shipping_cost_net")
  grandtotal       Float?
  serviceFee       Float?   @map("service_fee")
  netIncome        Float?   @map("net_income")
  etd              String?
  type             String? // reguler, cargo, instant
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  Order Order @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([shippingName])
  @@index([serviceName])
  @@index([type])
  @@map("shipping_services")
}

model PaymentMethod {
  id            String   @id @default(uuid()) @db.Uuid
  name          String?
  bankName      String?  @map("bank_name")
  bankBranch    String?  @map("bank_branch")
  accountNumber String?  @map("account_number")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  orderDetails OrderDetail[]

  @@index([name])
  @@map("payment_methods")
}

model DeliveryPlace {
  id            String   @id @default(uuid()) @db.Uuid
  name          String?
  address       String?  @db.Text
  subdistrict   String?
  phoneNumber   String?  @map("phone_number")
  destinationId Int?     @map("destination_id")
  email         String?
  description   String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  Order         Order[]

  @@index([name])
  @@index([email])
  @@map("delivery_places")
}

model Expense {
  id                String    @id @default(uuid()) @db.Uuid
  itemName          String?   @map("item_name")
  itemPrice         Float?    @map("item_price")
  expenseDate       DateTime? @map("expense_date")
  qty               Int?      @map("item_total")
  totalPrice        Float?    @map("total_price")
  personResponsible String?   @map("person_responsible")
  note              String?   @db.Text
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@index([personResponsible])
  @@map("expenses")
}

model ShopSetting {
  id          String   @id @default(uuid()) @db.Uuid
  name        String?
  description String?  @db.Text
  email       String?
  phoneNumber String?  @map("phone_number")
  address     String?  @db.Text
  owner       String?
  logo        String?
  banner      String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("shop_settings")
}

model SalesChannel {
  id        String   @id @default(uuid()) @db.Uuid
  name      String?
  isActive  Boolean? @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Order     Order[]

  @@index([name])
  @@index([isActive])
  @@map("sales_channels")
}

model Province {
  id        BigInt   @id @default(autoincrement())
  name      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  City City[]

  @@index([name])
  @@map("provinces")
}

model City {
  id         BigInt   @id @default(autoincrement())
  provinceId BigInt?  @map("province_id")
  name       String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  province Province?  @relation(fields: [provinceId], references: [id])
  District District[]

  @@index([name])
  @@map("cities")
}

model District {
  id        BigInt   @id @default(autoincrement())
  cityId    BigInt?  @map("city_id")
  name      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  city    City?     @relation(fields: [cityId], references: [id])
  Village Village[]

  @@index([name])
  @@map("districts")
}

model Village {
  id         BigInt  @id @default(autoincrement())
  districtId BigInt? @map("disctict_id")
  name       String?
  postalCode Int?

  district District? @relation(fields: [districtId], references: [id])

  @@index([name])
  @@map("villages")
}
