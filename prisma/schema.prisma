// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  SUPERADMIN
}

enum PaymentStatus {
  settlement
  pending
  cancel
  installments
}

enum ProductTypes {
  BARANG_STOK_SENDIRI
  BARANG_SUPPLIER_LAIN
  BARANG_PRE_ORDER
}

enum CustomerCategories {
  CUSTOMER
  RESELLER
  DROPSHIPPER
  MEMBER
  AGENT
}

enum CustomerStatuses {
  ACTIVE
  NONACTIVE
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  fullname  String?
  email     String?   @unique
  password  String?
  role      Roles?
  createdAt DateTime? @map("created_at")

  @@index([email])
  @@map("users")
}

model Category {
  id        String    @id @default(uuid()) @db.Uuid
  name      String?
  products  Product[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@index([name])
  @@map("categories")
}

model Product {
  id          String        @id @default(uuid()) @db.Uuid
  categoryId  String?       @map("category_id") @db.Uuid
  name        String?
  type        ProductTypes?
  description String?       @db.Text
  weight      Float?
  isPublish   Boolean?      @default(true) @map("is_publish")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  category        Category?        @relation(fields: [categoryId], references: [id])
  productVariants ProductVariant[]
  orderDetails    OrderDetail[]

  @@index([categoryId])
  @@index([name])
  @@index([isPublish])
  @@map("products")
}

model ProductWholesaler {
  id               String   @id @default(uuid()) @db.Uuid
  productVariantId String?  @map("product_variant_id") @db.Uuid
  lowerLimitItem   Int?     @map("lower_limit_item")
  upperLimitItem   Int?     @map("upper_limit_item")
  unitPrice        Float?   @map("unit_price")
  wholesalerPrice  Float?   @map("wholesaler_price")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@map("product_wholesaler")
}

model ProductPrice {
  id               String   @id @default(uuid()) @db.Uuid
  productVariantId String?  @map("product_variant_id") @db.Uuid
  normal           Float?
  buy              Float?
  reseller         Float?
  agent            Float?
  member           Float?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@index([productVariantId])
  @@map("product_prices")
}

model ProductVariant {
  id        String   @id @default(uuid()) @db.Uuid
  productId String?  @map("product_id") @db.Uuid
  sku       String?
  stock     Int?
  size      String?
  color     String?
  imageUrl  String?  @map("image_url")
  barcode   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product           Product?            @relation(fields: [productId], references: [id], onDelete: Cascade)
  productPrices     ProductPrice[]
  ProductWholesaler ProductWholesaler[]

  @@index([productId])
  @@index([sku])
  @@map("product_variant")
}

model Customer {
  id             String              @id @default(uuid()) @db.Uuid
  name           String?
  category       CustomerCategories?
  address        String?             @db.Text
  subdistrict    String?
  postalCode     String?             @map("postal_code")
  phoneNumber    String?             @map("phone_number")
  destination_id Int?
  email          String?
  status         CustomerStatuses?
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")

  ordersAsOrderer        Order[] @relation("OrdererCustomer")
  ordersAsDeliveryTarget Order[] @relation("DeliveryTargetCustomer")

  @@index([email])
  @@index([phoneNumber])
  @@index([category])
  @@index([status])
  @@map("customers")
}

model Order {
  id                       String    @id @default(uuid()) @db.Uuid
  ordererCustomerId        String?   @map("orderer_customer_id") @db.Uuid
  deliveryTargetCustomerId String?   @map("delivery_target_customer_id") @db.Uuid
  senderPlace              String?   @map("sender_place")
  orderDate                DateTime? @map("order_date") @db.Date
  salesChannel             String?   @map("sales_channel")
  note                     String?   @db.Text
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")

  ordererCustomer        Customer? @relation("OrdererCustomer", fields: [ordererCustomerId], references: [id])
  deliveryTargetCustomer Customer? @relation("DeliveryTargetCustomer", fields: [deliveryTargetCustomerId], references: [id])

  @@index([ordererCustomerId])
  @@index([deliveryTargetCustomerId])
  @@index([orderDate])
  @@index([salesChannel])
  @@map("orders")
}

model OrderDetail {
  id              String         @id @default(uuid()) @db.Uuid
  productId       String?        @map("product_id") @db.Uuid
  paymentMethodId String?        @map("payment_method_id") @db.Uuid
  code            String?
  productQty      Int?           @map("product_qty")
  courierName     String?        @map("courier_name")
  courierCategory String?        @map("courier_category")
  courierEta      String?        @map("courier_eta")
  courierCost     String?        @map("courier_cost")
  otherFees       Json?          @map("other_fees")
  finalPrice      Float?         @map("final_price")
  paymentStatus   PaymentStatus?
  paymentDate     DateTime?      @map("payment_date")
  receiptNumber   String?        @map("receipt_number")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  product       Product?       @relation(fields: [productId], references: [id])
  paymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])

  @@index([productId])
  @@index([paymentMethodId])
  @@index([paymentStatus])
  @@index([code])
  @@map("order_details")
}

model PaymentMethod {
  id            String   @id @default(uuid()) @db.Uuid
  name          String?
  bankName      String?  @map("bank_name")
  bankBranch    String?  @map("bank_branch")
  accountNumber String?  @map("account_number")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  orderDetails OrderDetail[]

  @@index([name])
  @@map("payment_methods")
}

model DeliveryPlace {
  id             String   @id @default(uuid()) @db.Uuid
  name           String?
  address        String?  @db.Text
  subdistrict    String?
  phoneNumber    String?  @map("phone_number")
  destination_id Int?
  email          String?
  description    String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@index([name])
  @@index([email])
  @@map("delivery_places")
}

model Expense {
  id                String   @id @default(uuid()) @db.Uuid
  itemName          String?  @map("item_name")
  itemPrice         Float?   @map("item_price")
  qty               Int?     @map("item_total")
  totalPrice        Float?   @map("total_price")
  personResponsible String?  @map("person_responsible")
  note              String?  @db.Text
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([personResponsible])
  @@map("expenses")
}

model ShopSetting {
  id          String   @id @default(uuid()) @db.Uuid
  name        String?
  description String?  @db.Text
  email       String?
  phoneNumber String?  @map("phone_number")
  address     String?  @db.Text
  owner       String?
  logo        String?
  banner      String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("shop_settings")
}

model SalesChannel {
  id        String   @id @default(uuid()) @db.Uuid
  name      String?
  isActive  Boolean? @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([name])
  @@index([isActive])
  @@map("sales_channels")
}
